!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);class r{constructor(){this.sortCycleEventName="sort-cycle",this.displayName="js-display",this.insertionSortBtn="js-btn-insertion-sort"}}let o=new r;const i=e=>{var t,n,r;for(r=e.length-1;r>0;r--)t=Math.floor(Math.random()*(r+1)),n=e[r],e[r]=e[t],e[t]=n;return e},l=e=>{let t=new CustomEvent(o.sortCycleEventName,{detail:e});document.getElementById(o.displayName).dispatchEvent(t)};window.onload=function(){let e=new r,t=document.getElementById(e.displayName);t.addEventListener(e.sortCycleEventName,e=>{!async function(e,t){if(void 0===e)return void console.log("undefined");let n=`<p>${e.detail}</p>`;t.innerHTML=n}(e,t)}),document.getElementById(e.insertionSortBtn).addEventListener("click",()=>(e=>{console.log("Insertion: started");for(let t=1;t<e.length;t++)setTimeout(()=>{let n=t-1,r=e[t];for(;n>=0&&e[n]>r;)e[n+1]=e[n],l(e),n--;e[n+1]=r},0)})(function(e){let t=new Array(e);for(var n=1;n<=e;n++)t[n]=n;return i(t),t}(1e3)))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,